// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/cristianoliveira/other/aerospace-marks/pkgs/aerospacecli/connector.go
//
// Generated by this command:
//
//	mockgen -source=/Users/cristianoliveira/other/aerospace-marks/pkgs/aerospacecli/connector.go -destination=internal/mocks/aerospacecli/connector_mock.go -package=aerospacecli_mock
//

// Package aerospacecli_mock is a generated GoMock package.
package aerospacecli_mock

import (
	reflect "reflect"

	aerospacecli "github.com/cristianoliveira/aerospace-marks/pkgs/aerospacecli"
	gomock "go.uber.org/mock/gomock"
)

// MockAeroSpaceSocketConn is a mock of AeroSpaceSocketConn interface.
type MockAeroSpaceSocketConn struct {
	ctrl     *gomock.Controller
	recorder *MockAeroSpaceSocketConnMockRecorder
	isgomock struct{}
}

// MockAeroSpaceSocketConnMockRecorder is the mock recorder for MockAeroSpaceSocketConn.
type MockAeroSpaceSocketConnMockRecorder struct {
	mock *MockAeroSpaceSocketConn
}

// NewMockAeroSpaceSocketConn creates a new mock instance.
func NewMockAeroSpaceSocketConn(ctrl *gomock.Controller) *MockAeroSpaceSocketConn {
	mock := &MockAeroSpaceSocketConn{ctrl: ctrl}
	mock.recorder = &MockAeroSpaceSocketConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAeroSpaceSocketConn) EXPECT() *MockAeroSpaceSocketConnMockRecorder {
	return m.recorder
}

// CloseConnection mocks base method.
func (m *MockAeroSpaceSocketConn) CloseConnection() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseConnection")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseConnection indicates an expected call of CloseConnection.
func (mr *MockAeroSpaceSocketConnMockRecorder) CloseConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseConnection", reflect.TypeOf((*MockAeroSpaceSocketConn)(nil).CloseConnection))
}

// GetSocketPath mocks base method.
func (m *MockAeroSpaceSocketConn) GetSocketPath() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSocketPath")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSocketPath indicates an expected call of GetSocketPath.
func (mr *MockAeroSpaceSocketConnMockRecorder) GetSocketPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSocketPath", reflect.TypeOf((*MockAeroSpaceSocketConn)(nil).GetSocketPath))
}

// SendCommand mocks base method.
func (m *MockAeroSpaceSocketConn) SendCommand(command string, args []string) (*aerospacecli.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCommand", command, args)
	ret0, _ := ret[0].(*aerospacecli.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendCommand indicates an expected call of SendCommand.
func (mr *MockAeroSpaceSocketConnMockRecorder) SendCommand(command, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCommand", reflect.TypeOf((*MockAeroSpaceSocketConn)(nil).SendCommand), command, args)
}

// MockAeroSpaceConnector is a mock of AeroSpaceConnector interface.
type MockAeroSpaceConnector struct {
	ctrl     *gomock.Controller
	recorder *MockAeroSpaceConnectorMockRecorder
	isgomock struct{}
}

// MockAeroSpaceConnectorMockRecorder is the mock recorder for MockAeroSpaceConnector.
type MockAeroSpaceConnectorMockRecorder struct {
	mock *MockAeroSpaceConnector
}

// NewMockAeroSpaceConnector creates a new mock instance.
func NewMockAeroSpaceConnector(ctrl *gomock.Controller) *MockAeroSpaceConnector {
	mock := &MockAeroSpaceConnector{ctrl: ctrl}
	mock.recorder = &MockAeroSpaceConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAeroSpaceConnector) EXPECT() *MockAeroSpaceConnectorMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockAeroSpaceConnector) Connect() (aerospacecli.AeroSpaceSocketConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(aerospacecli.AeroSpaceSocketConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockAeroSpaceConnectorMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockAeroSpaceConnector)(nil).Connect))
}
