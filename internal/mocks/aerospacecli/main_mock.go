// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/cristianoliveira/other/aerospace-marks/pkgs/aerospacecli/main.go
//
// Generated by this command:
//
//	mockgen -source=/Users/cristianoliveira/other/aerospace-marks/pkgs/aerospacecli/main.go -destination=internal/mocks/aerospacecli/main_mock.go -package=aerospacecli_mock
//

// Package aerospacecli_mock is a generated GoMock package.
package aerospacecli_mock

import (
	reflect "reflect"

	aerospacecli "github.com/cristianoliveira/aerospace-marks/pkgs/aerospacecli"
	gomock "go.uber.org/mock/gomock"
)

// MockAeroSpaceClient is a mock of AeroSpaceClient interface.
type MockAeroSpaceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAeroSpaceClientMockRecorder
	isgomock struct{}
}

// MockAeroSpaceClientMockRecorder is the mock recorder for MockAeroSpaceClient.
type MockAeroSpaceClientMockRecorder struct {
	mock *MockAeroSpaceClient
}

// NewMockAeroSpaceClient creates a new mock instance.
func NewMockAeroSpaceClient(ctrl *gomock.Controller) *MockAeroSpaceClient {
	mock := &MockAeroSpaceClient{ctrl: ctrl}
	mock.recorder = &MockAeroSpaceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAeroSpaceClient) EXPECT() *MockAeroSpaceClientMockRecorder {
	return m.recorder
}

// Client mocks base method.
func (m *MockAeroSpaceClient) Client() aerospacecli.AeroSpaceSocketConn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(aerospacecli.AeroSpaceSocketConn)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockAeroSpaceClientMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockAeroSpaceClient)(nil).Client))
}

// CloseConnection mocks base method.
func (m *MockAeroSpaceClient) CloseConnection() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseConnection")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseConnection indicates an expected call of CloseConnection.
func (mr *MockAeroSpaceClientMockRecorder) CloseConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseConnection", reflect.TypeOf((*MockAeroSpaceClient)(nil).CloseConnection))
}

// GetAllWindows mocks base method.
func (m *MockAeroSpaceClient) GetAllWindows() ([]aerospacecli.Window, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWindows")
	ret0, _ := ret[0].([]aerospacecli.Window)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWindows indicates an expected call of GetAllWindows.
func (mr *MockAeroSpaceClientMockRecorder) GetAllWindows() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWindows", reflect.TypeOf((*MockAeroSpaceClient)(nil).GetAllWindows))
}

// GetAllWindowsByWorkspace mocks base method.
func (m *MockAeroSpaceClient) GetAllWindowsByWorkspace(workspaceName string) ([]aerospacecli.Window, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWindowsByWorkspace", workspaceName)
	ret0, _ := ret[0].([]aerospacecli.Window)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWindowsByWorkspace indicates an expected call of GetAllWindowsByWorkspace.
func (mr *MockAeroSpaceClientMockRecorder) GetAllWindowsByWorkspace(workspaceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWindowsByWorkspace", reflect.TypeOf((*MockAeroSpaceClient)(nil).GetAllWindowsByWorkspace), workspaceName)
}

// GetFocusedWindow mocks base method.
func (m *MockAeroSpaceClient) GetFocusedWindow() (*aerospacecli.Window, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFocusedWindow")
	ret0, _ := ret[0].(*aerospacecli.Window)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFocusedWindow indicates an expected call of GetFocusedWindow.
func (mr *MockAeroSpaceClientMockRecorder) GetFocusedWindow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFocusedWindow", reflect.TypeOf((*MockAeroSpaceClient)(nil).GetFocusedWindow))
}

// GetFocusedWorkspace mocks base method.
func (m *MockAeroSpaceClient) GetFocusedWorkspace() (*aerospacecli.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFocusedWorkspace")
	ret0, _ := ret[0].(*aerospacecli.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFocusedWorkspace indicates an expected call of GetFocusedWorkspace.
func (mr *MockAeroSpaceClientMockRecorder) GetFocusedWorkspace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFocusedWorkspace", reflect.TypeOf((*MockAeroSpaceClient)(nil).GetFocusedWorkspace))
}

// MoveWindowToWorkspace mocks base method.
func (m *MockAeroSpaceClient) MoveWindowToWorkspace(windowID int, workspaceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveWindowToWorkspace", windowID, workspaceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveWindowToWorkspace indicates an expected call of MoveWindowToWorkspace.
func (mr *MockAeroSpaceClientMockRecorder) MoveWindowToWorkspace(windowID, workspaceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveWindowToWorkspace", reflect.TypeOf((*MockAeroSpaceClient)(nil).MoveWindowToWorkspace), windowID, workspaceName)
}

// SetFocusByWindowID mocks base method.
func (m *MockAeroSpaceClient) SetFocusByWindowID(windowID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFocusByWindowID", windowID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFocusByWindowID indicates an expected call of SetFocusByWindowID.
func (mr *MockAeroSpaceClientMockRecorder) SetFocusByWindowID(windowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFocusByWindowID", reflect.TypeOf((*MockAeroSpaceClient)(nil).SetFocusByWindowID), windowID)
}

// SetLayout mocks base method.
func (m *MockAeroSpaceClient) SetLayout(windowID int, layout string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLayout", windowID, layout)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLayout indicates an expected call of SetLayout.
func (mr *MockAeroSpaceClientMockRecorder) SetLayout(windowID, layout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLayout", reflect.TypeOf((*MockAeroSpaceClient)(nil).SetLayout), windowID, layout)
}
